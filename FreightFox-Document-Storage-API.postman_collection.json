{
	"info": {
		"_postman_id": "a1b2c3d4-e5f6-7890-abcd-ef1234567890",
		"name": "FreightFox Document Storage API",
		"description": "Complete API collection for FreightFox S3 Document Storage Service\n\n**Features:**\n- File upload with multipart form data\n- Search files by username and search term\n- List all user files with pagination\n- Delete files by filename\n- User-specific folder structure (userName/filename)\n\n**Base URL:** http://localhost:9090\n\n**Authentication:** None required\n\n**S3 Bucket:** freight-fox-doc-storage-20250819-181803",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "File Upload",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response contains file metadata\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('fileName');",
							"    pm.expect(jsonData).to.have.property('fileKey');",
							"    pm.expect(jsonData).to.have.property('fileSize');",
							"    pm.expect(jsonData).to.have.property('downloadUrl');",
							"});",
							"",
							"pm.test(\"Download URL is valid\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData.downloadUrl).to.include('https://');",
							"    pm.expect(jsonData.downloadUrl).to.include('s3');",
							"});",
							"",
							"// Save filename for other tests",
							"if (pm.response.code === 200) {",
							"    var responseJson = pm.response.json();",
							"    pm.collectionVariables.set(\"uploadedFileName\", responseJson.fileName);",
							"}"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "userName",
							"value": "{{userName}}",
							"description": "Username for file storage (creates folder structure)",
							"type": "text"
						},
						{
							"key": "file",
							"description": "File to upload (select from your computer)",
							"type": "file",
							"src": []
						}
					]
				},
				"url": {
					"raw": "{{baseUrl}}/api/freight-fox/s3-bucket/upload",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"freight-fox",
						"s3-bucket",
						"upload"
					]
				},
				"description": "Upload a file to S3 bucket under user-specific folder.\n\n**Parameters:**\n- `userName`: Required string - Creates folder structure userName/filename\n- `file`: Required file - The file to upload\n\n**Response:**\n- Returns file metadata with download URL\n- File is stored at: userName/filename\n- Download URL expires in 15 minutes\n\n**Example:**\n- userName: \"sandy\"\n- file: logistics-report.pdf\n- Stored as: sandy/logistics-report.pdf"
			},
			"response": [
				{
					"name": "Successful Upload",
					"originalRequest": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "formdata",
							"formdata": [
								{
									"key": "userName",
									"value": "sandy",
									"type": "text"
								},
								{
									"key": "file",
									"type": "file",
									"src": "/tmp/sample-document.txt"
								}
							]
						},
						"url": {
							"raw": "http://localhost:9090/api/freight-fox/s3-bucket/upload",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "9090",
							"path": [
								"api",
								"freight-fox",
								"s3-bucket",
								"upload"
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n    \"fileName\": \"sample-document.txt\",\n    \"fileKey\": \"sandy/sample-document.txt\",\n    \"fileSize\": 1024,\n    \"lastModified\": \"2025-08-19T12:50:22.959Z\",\n    \"downloadUrl\": \"https://freight-fox-doc-storage-20250819-181803.s3.ap-south-1.amazonaws.com/sandy/sample-document.txt?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Date=20250819T125022Z&X-Amz-SignedHeaders=host&X-Amz-Credential=AKIA4CU2HKCGH24EMCPM%2F20250819%2Fap-south-1%2Fs3%2Faws4_request&X-Amz-Expires=900&X-Amz-Signature=abc123...\"\n}"
				}
			]
		},
		{
			"name": "Search Files",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response has SearchResponse structure\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('success');",
							"    pm.expect(jsonData).to.have.property('message');",
							"    pm.expect(jsonData).to.have.property('files');",
							"    pm.expect(jsonData).to.have.property('timestamp');",
							"    pm.expect(jsonData.files).to.be.an('array');",
							"});",
							"",
							"pm.test(\"Each file has required properties\", function () {",
							"    var jsonData = pm.response.json();",
							"    if (jsonData.files.length > 0) {",
							"        jsonData.files.forEach(function(file) {",
							"            pm.expect(file).to.have.property('fileName');",
							"            pm.expect(file).to.have.property('fileKey');",
							"            pm.expect(file).to.have.property('fileSize');",
							"            pm.expect(file).to.have.property('downloadUrl');",
							"        });",
							"    }",
							"});",
							"",
							"pm.test(\"Search term filtering works\", function () {",
							"    var jsonData = pm.response.json();",
							"    var searchTerm = pm.request.url.query.get('searchTerm');",
							"    if (searchTerm && jsonData.files.length > 0) {",
							"        jsonData.files.forEach(function(file) {",
							"            pm.expect(file.fileName.toLowerCase()).to.include(searchTerm.toLowerCase());",
							"        });",
							"    }",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/api/freight-fox/s3-bucket/search?userName={{userName}}&searchTerm={{searchTerm}}&page={{page}}&size={{size}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"freight-fox",
						"s3-bucket",
						"search"
					],
					"query": [
						{
							"key": "userName",
							"value": "{{userName}}",
							"description": "Required - Username to search files for"
						},
						{
							"key": "searchTerm",
							"value": "{{searchTerm}}",
							"description": "Optional - Search term to filter filenames (case-insensitive)"
						},
						{
							"key": "page",
							"value": "{{page}}",
							"description": "Optional - Page number (default: 0)"
						},
						{
							"key": "size",
							"value": "{{size}}",
							"description": "Optional - Page size (default: 10, max: 1000)"
						}
					]
				},
				"description": "Search for files by username and optional search term with pagination.\n\n**Parameters:**\n- `userName`: Required - Username to search files for\n- `searchTerm`: Optional - Filter filenames containing this term (case-insensitive)\n- `page`: Optional - Page number (default: 0)\n- `size`: Optional - Items per page (default: 10, max: 1000)\n\n**Response:**\n- Returns array of file metadata objects\n- Each object includes download URL (expires in 15 minutes)\n- Results are paginated\n- Search is performed on filename only\n\n**Examples:**\n- Search all files: `userName=sandy`\n- Search logistics files: `userName=sandy&searchTerm=logistics`\n- Paginated: `userName=sandy&page=1&size=5`"
			},
			"response": [
				{
					"name": "Search Results",
					"originalRequest": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://localhost:9090/api/freight-fox/s3-bucket/search?userName=sandy&searchTerm=logistics&page=0&size=10",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "9090",
							"path": [
								"api",
								"freight-fox",
								"s3-bucket",
								"search"
							],
							"query": [
								{
									"key": "userName",
									"value": "sandy"
								},
								{
									"key": "searchTerm",
									"value": "logistics"
								},
								{
									"key": "page",
									"value": "0"
								},
								{
									"key": "size",
									"value": "10"
								}
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "[\n    {\n        \"fileName\": \"logistics-report.pdf\",\n        \"fileKey\": \"sandy/logistics-report.pdf\",\n        \"fileSize\": 2048,\n        \"lastModified\": \"2025-08-19T12:45:30Z\",\n        \"downloadUrl\": \"https://freight-fox-doc-storage-20250819-181803.s3.ap-south-1.amazonaws.com/sandy/logistics-report.pdf?X-Amz-Algorithm=AWS4-HMAC-SHA256&X-Amz-Date=20250819T125022Z&X-Amz-SignedHeaders=host&X-Amz-Credential=AKIA4CU2HKCGH24EMCPM%2F20250819%2Fap-south-1%2Fs3%2Faws4_request&X-Amz-Expires=900&X-Amz-Signature=def456...\"\n    }\n]"
				}
			]
		},
		{
			"name": "List All User Files",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response has SearchResponse structure\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('success');",
							"    pm.expect(jsonData).to.have.property('message');",
							"    pm.expect(jsonData).to.have.property('files');",
							"    pm.expect(jsonData).to.have.property('timestamp');",
							"    pm.expect(jsonData.files).to.be.an('array');",
							"});",
							"",
							"pm.test(\"Pagination parameters work\", function () {",
							"    var jsonData = pm.response.json();",
							"    var size = parseInt(pm.request.url.query.get('size') || '10');",
							"    pm.expect(jsonData.files.length).to.be.at.most(size);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/api/freight-fox/s3-bucket/search/files?userName={{userName}}&page={{page}}&size={{size}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"freight-fox",
						"s3-bucket",
						"search",
						"files"
					],
					"query": [
						{
							"key": "userName",
							"value": "{{userName}}",
							"description": "Required - Username to list files for"
						},
						{
							"key": "page",
							"value": "{{page}}",
							"description": "Optional - Page number (default: 0)"
						},
						{
							"key": "size",
							"value": "{{size}}",
							"description": "Optional - Page size (default: 10, max: 1000)"
						}
					]
				},
				"description": "List all files for a specific user with pagination.\n\n**Parameters:**\n- `userName`: Required - Username to list files for\n- `page`: Optional - Page number (default: 0)\n- `size`: Optional - Items per page (default: 10, max: 1000)\n\n**Response:**\n- Returns array of all user's file metadata objects\n- Each object includes download URL (expires in 15 minutes)\n- Results are paginated\n- No search filtering applied\n\n**Use Cases:**\n- Get all files for a user\n- Browse user's document library\n- Implement file listing UI"
			},
			"response": []
		},
		{
			"name": "Delete File",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"Response indicates success\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('success');",
							"    pm.expect(jsonData.success).to.be.true;",
							"    pm.expect(jsonData).to.have.property('message');",
							"    pm.expect(jsonData.message).to.include('deleted successfully');",
							"});",
							"",
							"pm.test(\"Response contains timestamp\", function () {",
							"    var jsonData = pm.response.json();",
							"    pm.expect(jsonData).to.have.property('timestamp');",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Accept",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/api/freight-fox/s3-bucket/delete?userName={{userName}}&fileName={{deleteFileName}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"api",
						"freight-fox",
						"s3-bucket",
						"delete"
					],
					"query": [
						{
							"key": "userName",
							"value": "{{userName}}",
							"description": "Required - Username who owns the file"
						},
						{
							"key": "fileName",
							"value": "{{deleteFileName}}",
							"description": "Required - Exact filename to delete"
						}
					]
				},
				"description": "Delete a specific file from user's S3 folder.\n\n**Parameters:**\n- `userName`: Required - Username who owns the file\n- `fileName`: Required - Exact filename to delete (not the full S3 key)\n\n**Response:**\n- Returns success status and message\n- Includes timestamp of deletion\n\n**Behavior:**\n- Checks if file exists before attempting deletion\n- Returns 400 error if file not found\n- File path resolved as: userName/fileName\n- Permanent deletion (cannot be undone)\n\n**Example:**\n- userName: \"sandy\"\n- fileName: \"logistics-report.pdf\"\n- Deletes: sandy/logistics-report.pdf"
			},
			"response": [
				{
					"name": "Successful Deletion",
					"originalRequest": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://localhost:9090/api/freight-fox/s3-bucket/delete?userName=sandy&fileName=test-document.txt",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "9090",
							"path": [
								"api",
								"freight-fox",
								"s3-bucket",
								"delete"
							],
							"query": [
								{
									"key": "userName",
									"value": "sandy"
								},
								{
									"key": "fileName",
									"value": "test-document.txt"
								}
							]
						}
					},
					"status": "OK",
					"code": 200,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n    \"success\": true,\n    \"message\": \"File deleted successfully: test-document.txt\",\n    \"timestamp\": \"2025-08-19 18:35:48\"\n}"
				},
				{
					"name": "File Not Found",
					"originalRequest": {
						"method": "DELETE",
						"header": [
							{
								"key": "Accept",
								"value": "application/json",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://localhost:9090/api/freight-fox/s3-bucket/delete?userName=sandy&fileName=nonexistent.txt",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "9090",
							"path": [
								"api",
								"freight-fox",
								"s3-bucket",
								"delete"
							],
							"query": [
								{
									"key": "userName",
									"value": "sandy"
								},
								{
									"key": "fileName",
									"value": "nonexistent.txt"
								}
							]
						}
					},
					"status": "Bad Request",
					"code": 400,
					"_postman_previewlanguage": "json",
					"header": [
						{
							"key": "Content-Type",
							"value": "application/json"
						}
					],
					"cookie": [],
					"body": "{\n    \"status\": 400,\n    \"message\": \"File not found: nonexistent.txt\",\n    \"path\": \"/api/freight-fox/s3-bucket/delete\",\n    \"timestamp\": \"2025-08-19 18:26:59\"\n}"
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Set default values if variables are not set",
					"if (!pm.collectionVariables.get(\"baseUrl\")) {",
					"    pm.collectionVariables.set(\"baseUrl\", \"http://localhost:9090\");",
					"}",
					"",
					"if (!pm.collectionVariables.get(\"userName\")) {",
					"    pm.collectionVariables.set(\"userName\", \"sandy\");",
					"}",
					"",
					"if (!pm.collectionVariables.get(\"searchTerm\")) {",
					"    pm.collectionVariables.set(\"searchTerm\", \"document\");",
					"}",
					"",
					"if (!pm.collectionVariables.get(\"page\")) {",
					"    pm.collectionVariables.set(\"page\", \"0\");",
					"}",
					"",
					"if (!pm.collectionVariables.get(\"size\")) {",
					"    pm.collectionVariables.set(\"size\", \"10\");",
					"}",
					"",
					"if (!pm.collectionVariables.get(\"deleteFileName\")) {",
					"    pm.collectionVariables.set(\"deleteFileName\", \"test-document.txt\");",
					"}"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Global test to check response time",
					"pm.test(\"Response time is less than 5000ms\", function () {",
					"    pm.expect(pm.response.responseTime).to.be.below(5000);",
					"});",
					"",
					"// Global test to check content type",
					"pm.test(\"Content-Type is application/json\", function () {",
					"    pm.expect(pm.response.headers.get('Content-Type')).to.include('application/json');",
					"});"
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:9090",
			"type": "string"
		},
		{
			"key": "userName",
			"value": "sandy",
			"type": "string",
			"description": "Default username for testing"
		},
		{
			"key": "searchTerm",
			"value": "document",
			"type": "string",
			"description": "Default search term for file searching"
		},
		{
			"key": "page",
			"value": "0",
			"type": "string",
			"description": "Default page number for pagination"
		},
		{
			"key": "size",
			"value": "10",
			"type": "string",
			"description": "Default page size for pagination"
		},
		{
			"key": "deleteFileName",
			"value": "test-document.txt",
			"type": "string",
			"description": "Filename to delete (update this for testing)"
		},
		{
			"key": "uploadedFileName",
			"value": "",
			"type": "string",
			"description": "Stores the filename of the last uploaded file"
		}
	]
}